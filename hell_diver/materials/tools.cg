// ----------------------------------------------------------------------
float4 lighting(
	float4 lightPosition, 
	float4 lightColour, 
	float4 worldPos,
	float4x4 worldIT,
	float4 normal)
{

    float3 worldNorm = mul(worldIT, normal).xyz;
    // calculate lighting (simple vertex lighting)
    float3 lightDir = normalize(
        lightPosition.xyz - (worldPos.xyz * lightPosition.w));

    return lightColour * max(dot(lightDir, worldNorm), 0.0);
}


/*
float4 blend_light(
	float4 decalColor
	float4 ambientLightColor,
	float4 diffuseLightColor,
	float inShadow) 
{
    float4 result = decalColor * ambientLightColor + decalColor * diffuseLightColor * inShadow;
    return result;
}
*/

// ----------------------------------------------------------------------
float4 fog(
        float4 fogColor,
	float depth, 	
	float4 fogParams) 
{
    //float fogAmount = min(abs(depth - fogParams.y) * fogParams.w), 1.0);
    float fogAmount = max(min((depth - fogParams.y) * fogParams.w, 1.0), 0.0);
    //float fogAmount = 1.0 - (1.0 / exp(pow(abs(oPosition.z) * fogParams.x, 2)));
    fogColor.a = fogAmount;
    return fogColor;
}

float4 blend_fog(
	float4 weightedFogColor,
	float4 inputColor) 
{
    float4 result = float4(weightedFogColor.a * weightedFogColor.rgb + (1.0 - weightedFogColor.a) * inputColor.rgb, inputColor.a);
/*
    float4 result = inputColor;
    float amount = 0.5;
    float depthShade = (1.0 - amount) + amount * (1.0 - weightedFogColor.a);

    result.rgb = result.rgb * depthShade;

    result = float4(0.2 * weightedFogColor.rgb + 0.8 * result.rgb, inputColor.a);

    //float4 result = float4(inputColor.rgb, inputColor.a);
*/
    return result;
}

// ----------------------------------------------------------------------
float determineDepthAdjustForShadow(float4 depths, 
    float fixedDepthBias,
    float gradientClamp,
    float gradientScaleBias,
    float centerDepth) {
    
    float2 differences = abs(depths.yw - depths.xz);
    float gradient = min(gradientClamp, max(differences.x, differences.y));
    float gradientFactor = gradient * gradientScaleBias;
    float depthAdjust = gradientFactor + (fixedDepthBias * centerDepth);
    
    return depthAdjust;
}
// ----------------------------------------------------------------------
float accumulateSamples(float final, float4 depths, float shadowUVz) {
    final += (depths.x > shadowUVz) ? 1.0f : 0.0f;
    final += (depths.y > shadowUVz) ? 1.0f : 0.0f;
    final += (depths.z > shadowUVz) ? 1.0f : 0.0f;
    final += (depths.w > shadowUVz) ? 1.0f : 0.0f;
	return final;
}

// ----------------------------------------------------------------------
float sampleShadowFirstPass(float4 shadowUV,
    sampler2D shadowMap,
    float inverseShadowmapSize,
    float fixedDepthBias,
    float gradientClamp,
    float gradientScaleBias,
    float centerDepth) {

#ifdef VERY_HIGH_SHADOWS
    float pixeloffset = inverseShadowmapSize * 1.5f;
#elif HIGH_SHADOWS
    float pixeloffset = inverseShadowmapSize * 1.5f;
#else // low
    float pixeloffset = inverseShadowmapSize * 1.0f;
#endif    
    
    float4 depths = float4(
        tex2D(shadowMap, shadowUV.xy + float2(-pixeloffset, 0)).x,
        tex2D(shadowMap, shadowUV.xy + float2(+pixeloffset, 0)).x,
        tex2D(shadowMap, shadowUV.xy + float2(0, -pixeloffset)).x,
        tex2D(shadowMap, shadowUV.xy + float2(0, +pixeloffset)).x);

	float depthAdjust = determineDepthAdjustForShadow(depths, fixedDepthBias, gradientClamp, gradientScaleBias, centerDepth);
    depths += depthAdjust.xxxx;

    float finalCenterDepth = centerDepth + depthAdjust;

    float final = (finalCenterDepth > shadowUV.z) ? 1.0f : 0.0f;

    final = accumulateSamples(final, depths, shadowUV.z);

	depths = float4(
		tex2D(shadowMap, shadowUV.xy + float2(-pixeloffset, -pixeloffset)).x,
		tex2D(shadowMap, shadowUV.xy + float2(+pixeloffset, +pixeloffset)).x,
		tex2D(shadowMap, shadowUV.xy + float2(+pixeloffset, -pixeloffset)).x,
		tex2D(shadowMap, shadowUV.xy + float2(-pixeloffset, +pixeloffset)).x);
    			
	depthAdjust = determineDepthAdjustForShadow(depths, fixedDepthBias, gradientClamp, gradientScaleBias, centerDepth);
	depths += depthAdjust.xxxx;

    final = accumulateSamples(final, depths, shadowUV.z);

	final *= 0.1111111f;
    
    return final;
}

// ----------------------------------------------------------------------
float sampleShadowLaterPass(float4 shadowUV,
    sampler2D shadowMap,
    float inverseShadowmapSize,
    float fixedDepthBias,
    float gradientClamp,
    float gradientScaleBias,
    float centerDepth,
    float offset) {
    
    float pixeloffset = inverseShadowmapSize * offset;

    float4 depths = float4(
        tex2D(shadowMap, shadowUV.xy + float2(-pixeloffset, 0)).x,
        tex2D(shadowMap, shadowUV.xy + float2(+pixeloffset, 0)).x,
        tex2D(shadowMap, shadowUV.xy + float2(0, -pixeloffset)).x,
        tex2D(shadowMap, shadowUV.xy + float2(0, +pixeloffset)).x);

	float depthAdjust = determineDepthAdjustForShadow(depths, fixedDepthBias, gradientClamp, gradientScaleBias, centerDepth);
    depths += depthAdjust.xxxx;

    float final = accumulateSamples(0.0f, depths, shadowUV.z);

	depths = float4(
		tex2D(shadowMap, shadowUV.xy + float2(-pixeloffset, -pixeloffset)).x,
		tex2D(shadowMap, shadowUV.xy + float2(+pixeloffset, +pixeloffset)).x,
		tex2D(shadowMap, shadowUV.xy + float2(+pixeloffset, -pixeloffset)).x,
		tex2D(shadowMap, shadowUV.xy + float2(-pixeloffset, +pixeloffset)).x);
    			
	depthAdjust = determineDepthAdjustForShadow(depths, fixedDepthBias, gradientClamp, gradientScaleBias, centerDepth);
	depths += depthAdjust.xxxx;

    final = accumulateSamples(final, depths, shadowUV.z);

	final *= 0.125f;
    
    return final;
}

// ----------------------------------------------------------------------
float in_shadow(
    float4 position,
    float4 shadowUV,
 
    sampler2D shadowMap,
    float inverseShadowmapSize,
    float fixedDepthBias,
    float gradientClamp,
    float gradientScaleBias,
    float shadowIntensity) 
{
    float result;

    // point on shadowmap
    shadowUV = shadowUV / shadowUV.w;

    float centerDepth = tex2D(shadowMap, shadowUV.xy).x;
 
	float final = sampleShadowFirstPass(shadowUV, shadowMap, inverseShadowmapSize, fixedDepthBias, gradientClamp, gradientScaleBias, centerDepth);

#ifdef VERY_HIGH_SHADOWS
	for (int i = 1; i < 4; ++i) {
		float offset = 2.5f * i;
		float final2 = sampleShadowLaterPass(shadowUV, shadowMap, inverseShadowmapSize, fixedDepthBias, gradientClamp, gradientScaleBias, centerDepth, offset);
		float weight = 0.7f;	
		final = weight * final + (1.0f - weight) * final2;
	}
#elif HIGH_SHADOWS
	for (int i = 1; i < 2; ++i) {
		float offset = 2.0f * i;
		float final2 = sampleShadowLaterPass(shadowUV, shadowMap, inverseShadowmapSize, fixedDepthBias, gradientClamp, gradientScaleBias, centerDepth, offset);
		float weight = 0.5f;	
		final = weight * final + (1.0f - weight) * final2;
	}
#else // low
#endif
  
    result = final;

    return result * shadowIntensity + (1 - shadowIntensity);
}



// ----------------------------------------------------------------------

void multipass_shadows_vp(
    float4 position        : POSITION,
    float4 normal          : NORMAL,

    out float4 outPos           : POSITION,
    out float4 outShadowUV      : TEXCOORD0,
    out float4 outDiffuseLightColor : TEXCOORD1,

    uniform float4x4 world,
    uniform float4x4 worldIT,
    uniform float4x4 worldViewProj,
    uniform float4x4 texViewProj,
    uniform float4 lightPosition,
    uniform float4 lightColor
    )
{
    float4 worldPos = mul(world, position);
    outPos = mul(worldViewProj, position);

    outDiffuseLightColor = lighting(lightPosition, lightColor, worldPos, worldIT, normal);

    outShadowUV = mul(texViewProj, worldPos);
}



void multipass_shadows_fp(
    float4 position            : POSITION,
    float4 shadowUV            : TEXCOORD0,
    float4 diffuseLightColor   : TEXCOORD1,

    uniform sampler2D shadowMap : register(s0),
    uniform float inverseShadowmapSize,
    uniform float fixedDepthBias,
    uniform float gradientClamp,
    uniform float gradientScaleBias,
    uniform float4 ambientLightColor,
    uniform float4 shadowColor,
 
    out float4 result        : COLOR)
{

    result = ambientLightColor + diffuseLightColor * in_shadow(position, shadowUV, shadowMap, inverseShadowmapSize, fixedDepthBias, gradientClamp, gradientScaleBias, shadowColor.a);
}
 


// ----------------------------------------------------------------------

void decal_shadows_vp(
    float4 position        : POSITION,
    float4 normal          : NORMAL,
    float2 uv   	   : TEXCOORD0,

    out float4 outPos               : POSITION,
    out float4 outShadowUV          : TEXCOORD0,
    out float4 outDiffuseLightColor : TEXCOORD1,
    out float2 outDecal1UV          : TEXCOORD2,
    out float4 outFogColor          : TEXCOORD3,
 
    uniform float4x4 world,
    uniform float4x4 worldIT,
    uniform float4x4 worldViewProj,
    uniform float4x4 texViewProj,
    uniform float4 lightPosition,
    uniform float4 lightColor,
    uniform float4x4 textureMatrix1,
    uniform float4 fogColor,
    uniform float4 fogParams)
{

    float4 worldPos = mul(world, position);
    outPos = mul(worldViewProj, position);

    outDecal1UV = mul(textureMatrix1, float4(uv,0,1)).xy;

    outDiffuseLightColor = lighting(lightPosition, lightColor, worldPos, worldIT, normal);
    outShadowUV = mul(texViewProj, worldPos);

    outFogColor = fog(fogColor, outPos.z, fogParams);

}



void decal_shadows_fp(
    float4 position            : POSITION,
    float4 shadowUV            : TEXCOORD0,
    float4 diffuseLightColor   : TEXCOORD1,
    float2 texCoords	       : TEXCOORD2,
    float4 fogColor	       : TEXCOORD3,
 
    uniform sampler2D shadowMap : register(s0),
    uniform float inverseShadowmapSize,
    uniform float fixedDepthBias,
    uniform float gradientClamp,
    uniform float gradientScaleBias,
    uniform float4 ambientLightColor,
    uniform float4 shadowColor,
 
    uniform sampler2D decalMap : register(s1),

    out float4 result        : COLOR)
{

    float4 decalColor = tex2D(decalMap, texCoords);

    result = decalColor * ambientLightColor + decalColor * diffuseLightColor * in_shadow(position, shadowUV, shadowMap, inverseShadowmapSize, fixedDepthBias, gradientClamp, gradientScaleBias, shadowColor.a);
    result = blend_fog(fogColor, result);
	result.a = decalColor.a;
}



// ----------------------------------------------------------------------

void decal_color_shadows_vp(
    float4 position        : POSITION,
    float4 normal          : NORMAL,
    float2 uv    	   : TEXCOORD0,

    out float4 outPos               : POSITION,
    out float4 outColor	            : COLOR,
    out float4 outShadowUV          : TEXCOORD0,
    out float4 outDiffuseLightColor : TEXCOORD1,
    out float2 outDecal1UV          : TEXCOORD2,
    out float4 outFogColor          : TEXCOORD3,

    uniform float4x4 world,
    uniform float4x4 worldIT,
    uniform float4x4 worldViewProj,
    uniform float4x4 texViewProj,
    uniform float4 lightPosition,
    uniform float4 lightColor,
    uniform float4 surfaceColor,
    uniform float4x4 textureMatrix1,
    uniform float4 fogColor,
    uniform float4 fogParams)
{

    float4 worldPos = mul(world, position);
    outPos = mul(worldViewProj, position);

    outColor = surfaceColor;

    outDecal1UV = mul(textureMatrix1, float4(uv,0,1)).xy;
    outDiffuseLightColor = lighting(lightPosition, lightColor, worldPos, worldIT, normal);
    outShadowUV = mul(texViewProj, worldPos);
    outFogColor = fog(fogColor, outPos.z, fogParams);
}



void decal_color_shadows_fp(
    float4 position            : POSITION,
    float4 color	       : COLOR,
    float4 shadowUV            : TEXCOORD0,
    float4 diffuseLightColor   : TEXCOORD1,
    float2 texCoords	       : TEXCOORD2,
    float4 fogColor	       : TEXCOORD3,

    uniform sampler2D shadowMap : register(s0),
    uniform float inverseShadowmapSize,
    uniform float fixedDepthBias,
    uniform float gradientClamp,
    uniform float gradientScaleBias,
    uniform float4 ambientLightColor,
    uniform float4 shadowColor,
 
    uniform sampler2D decalMap : register(s1),

    out float4 result        : COLOR)
{

    float4 decalColor = tex2D(decalMap, texCoords) * color;

    result = decalColor * ambientLightColor + decalColor * diffuseLightColor * in_shadow(position, shadowUV, shadowMap, inverseShadowmapSize, fixedDepthBias, gradientClamp, gradientScaleBias, shadowColor.a);

    result = blend_fog(fogColor, result);

    result.a = decalColor.a;
}

// ----------------------------------------------------------------------

void decal_color_cutout_shadows_fp(
    float4 position            : POSITION,
    float4 color	       : COLOR,
    float4 shadowUV            : TEXCOORD0,
    float4 diffuseLightColor   : TEXCOORD1,
    float2 texCoords	       : TEXCOORD2,
    float4 fogColor	       : TEXCOORD3,
    float2 texCoords2          : TEXCOORD4,
    float4 cutoutBlend         : TEXCOORD5,

    uniform sampler2D shadowMap : register(s0),
    uniform float inverseShadowmapSize,
    uniform float fixedDepthBias,
    uniform float gradientClamp,
    uniform float gradientScaleBias,
    uniform float4 ambientLightColor,
    uniform float4 shadowColor,
 
    uniform sampler2D decalMap : register(s1),

    uniform sampler2D cutoutMap : register(s2),

    out float4 result        : COLOR)
{

    float4 decalColor = tex2D(decalMap, texCoords);
    float4 cutoutColor = tex2D(cutoutMap, texCoords2);

    //decalColor.rgb = (cutoutColor.r * decalColor.rgb + (1.0 - cutoutColor.r)) * color.rgb;

    decalColor.rgb = decalColor.a * decalColor.rgb + (1.0 - decalColor.a) * color.rgb;

    cutoutColor.r = 
	cutoutBlend.r * cutoutColor.r +
	cutoutBlend.g * cutoutColor.g +
	cutoutBlend.b * cutoutColor.b +
	cutoutBlend.a * cutoutColor.a;

    decalColor.rgb = cutoutColor.r * decalColor.rgb + (1.0 - cutoutColor.r) * color.rgb;
    
    decalColor.a = 1.0;

    result = decalColor * ambientLightColor + decalColor * diffuseLightColor * in_shadow(position, shadowUV, shadowMap, inverseShadowmapSize, fixedDepthBias, gradientClamp, gradientScaleBias, shadowColor.a);

    result = blend_fog(fogColor, result);
    
    result.a = decalColor.a;
}

// ----------------------------------------------------------------------

void decal_color_blend_shadows_fp(
    float4 position            : POSITION,
    float4 color	       : COLOR,
    float4 shadowUV            : TEXCOORD0,
    float4 diffuseLightColor   : TEXCOORD1,
    float2 texCoords	       : TEXCOORD2,
    float4 fogColor	       : TEXCOORD3,

    uniform sampler2D shadowMap : register(s0),
    uniform float inverseShadowmapSize,
    uniform float fixedDepthBias,
    uniform float gradientClamp,
    uniform float gradientScaleBias,
    uniform float4 ambientLightColor,
    uniform float4 shadowColor,
 
    uniform sampler2D decalMap : register(s1),

    out float4 result        : COLOR)
{

    float4 decalColor = tex2D(decalMap, texCoords);
    decalColor.rgb = decalColor.a * decalColor.rgb + (1.0 - decalColor.a) * color.rgb;
    decalColor.a = 1.0;

    result = decalColor * ambientLightColor + decalColor * diffuseLightColor * in_shadow(position, shadowUV, shadowMap, inverseShadowmapSize, fixedDepthBias, gradientClamp, gradientScaleBias, shadowColor.a);

    result = blend_fog(fogColor, result);

    result.a = decalColor.a;
}


// ----------------------------------------------------------------------

void decal_vertex_color_shadows_vp(
    float4 position        : POSITION,
    float4 normal          : NORMAL,
    float2 uv    	   : TEXCOORD0,
    float4 color           : COLOR,

    out float4 outPos               : POSITION,
    out float4 outColor	            : COLOR,
    out float4 outShadowUV          : TEXCOORD0,
    out float4 outDiffuseLightColor : TEXCOORD1,
    out float2 outDecal1UV          : TEXCOORD2,
    out float4 outFogColor          : TEXCOORD3,

    uniform float4x4 world,
    uniform float4x4 worldIT,
    uniform float4x4 worldViewProj,
    uniform float4x4 texViewProj,
    uniform float4 lightPosition,
    uniform float4 lightColor,
    uniform float4x4 textureMatrix1,
    uniform float4 fogColor,
    uniform float4 fogParams)
{

    float4 worldPos = mul(world, position);
    outPos = mul(worldViewProj, position);

    outColor = color;

    outDecal1UV = mul(textureMatrix1, float4(uv,0,1)).xy;
    outDiffuseLightColor = lighting(lightPosition, lightColor, worldPos, worldIT, normal);
    outShadowUV = mul(texViewProj, worldPos);
    outFogColor = fog(fogColor, outPos.z, fogParams);
}

// ----------------------------------------------------------------------

void decal_color_cutout_shadows_vp(
    float4 position        : POSITION,
    float4 normal          : NORMAL,
    float2 uv    	   : TEXCOORD0,
    float2 uv2    	   : TEXCOORD1,
    float4 cutoutBlend     : TEXCOORD2,
    float4 color           : COLOR,

    out float4 outPos               : POSITION,
    out float4 outColor	            : COLOR,
    out float4 outShadowUV          : TEXCOORD0,
    out float4 outDiffuseLightColor : TEXCOORD1,
    out float2 outDecal1UV          : TEXCOORD2,
    out float4 outFogColor          : TEXCOORD3,
    out float2 outCutout1UV         : TEXCOORD4,
    out float4 outCutoutBlend       : TEXCOORD5,

    uniform float4x4 world,
    uniform float4x4 worldIT,
    uniform float4x4 worldViewProj,
    uniform float4x4 texViewProj,
    uniform float4 lightPosition,
    uniform float4 lightColor,
    //uniform float4x4 textureMatrix1,
    uniform float4 fogColor,
    uniform float4 fogParams)
{

    float4 worldPos = mul(world, position);
    outPos = mul(worldViewProj, position);

    outColor = color;

    //outDecal1UV = mul(textureMatrix1, float4(uv,0,1)).xy;
    outDecal1UV = uv;
    //outCutout1UV = mul(textureMatrix1, float4(uv2,0,1)).xy;
    outCutout1UV = uv2;
    outCutoutBlend = cutoutBlend;
    outDiffuseLightColor = lighting(lightPosition, lightColor, worldPos, worldIT, normal);
    outShadowUV = mul(texViewProj, worldPos);
    outFogColor = fog(fogColor, outPos.z, fogParams);
}

// ----------------------------------------------------------------------

void vertex_color_shadows_vp(
    float4 position        : POSITION,
    float4 normal          : NORMAL,
    float4 color           : COLOR,

    out float4 outPos               : POSITION,
    out float4 outColor             : COLOR,
    out float4 outShadowUV          : TEXCOORD0,
    out float4 outDiffuseLightColor : TEXCOORD1,
    out float4 outFogColor          : TEXCOORD2,

    uniform float4x4 world,
    uniform float4x4 worldIT,
    uniform float4x4 worldViewProj,
    uniform float4x4 texViewProj,
    uniform float4 lightPosition,
    uniform float4 lightColor,
    uniform float4 fogColor,
    uniform float4 fogParams)
{

    float4 worldPos = mul(world, position);
    outPos = mul(worldViewProj, position);

    outColor = color;

    outDiffuseLightColor = lighting(lightPosition, lightColor, worldPos, worldIT, normal);
    outShadowUV = mul(texViewProj, worldPos);
    outFogColor = fog(fogColor, outPos.z, fogParams);
}
  

// ----------------------------------------------------------------------

void color_shadows_vp(
    float4 position        : POSITION,
    float4 normal          : NORMAL,

    out float4 outPos               : POSITION,
    out float4 outColor             : COLOR,
    out float4 outShadowUV          : TEXCOORD0,
    out float4 outDiffuseLightColor : TEXCOORD1,
    out float4 outFogColor          : TEXCOORD2,

    uniform float4x4 world,
    uniform float4x4 worldIT,
    uniform float4x4 worldViewProj,
    uniform float4x4 texViewProj,
    uniform float4 lightPosition,
    uniform float4 lightColor,
    uniform float4 surfaceColor,
    uniform float4 fogColor,
    uniform float4 fogParams)
{

    float4 worldPos = mul(world, position);
    outPos = mul(worldViewProj, position);

    outColor = surfaceColor;

    outDiffuseLightColor = lighting(lightPosition, lightColor, worldPos, worldIT, normal);
    outShadowUV = mul(texViewProj, worldPos);
    outFogColor = fog(fogColor, outPos.z, fogParams);
}



void color_shadows_fp(
    float4 position            : POSITION,
    float4 color	       : COLOR,
    float4 shadowUV            : TEXCOORD0,
    float4 diffuseLightColor   : TEXCOORD1,
    float4 fogColor	       : TEXCOORD2,

    uniform sampler2D shadowMap : register(s0),
    uniform float inverseShadowmapSize,
    uniform float fixedDepthBias,
    uniform float gradientClamp,
    uniform float gradientScaleBias,
    uniform float4 ambientLightColor,
    uniform float4 shadowColor,
 
    out float4 result        : COLOR)
{

    result = color * ambientLightColor + color * diffuseLightColor * in_shadow(position, shadowUV, shadowMap, inverseShadowmapSize, fixedDepthBias, gradientClamp, gradientScaleBias, shadowColor.a);
    result = blend_fog(fogColor, result);
}
 

// -------------------------------------------

void pass_thru_fp(float4 color 		: COLOR,
		  out float4 oColour    : COLOR) 
{
	oColour = color;
}


// back contour helper lines
void back_contour_vp(
    float4 position        : POSITION,
    float4 color           : COLOR,   
 
    out float4 outPos      : POSITION,
    out float4 outColor    : COLOR,   
 
    uniform float4x4 worldViewProj,
    uniform float4 backLineParams
    //uniform float4 fogColor
    )
{
    outPos = mul(worldViewProj, position);

    float shade = backLineParams.x + color.r * (1.0 - backLineParams.x);
    //shade = fogColor.a * 1.0 + (1.0 - fogColor.a) * shade;
    
    outColor = float4(shade, shade, shade, 1.0);
}


// -------------------------------------------
void mesh_ghost_vp(
    float4 position     : POSITION,

    out float4 oPos   : POSITION,
    out float4 oColor	: COLOR,
 
    uniform float4x4 worldViewProj,
    uniform float4 teamColor,
    uniform float4 ambient)
{
    oPos = mul(worldViewProj, position);

    float weight = 0.5;
    oColor.rgb = weight * ambient.rgb + (1.0 - weight) * teamColor.rgb;
    oColor.a = 1.0;
}

// -------------------------------------------
void mesh_ghost_basic_vp(
    float4 position     : POSITION,

    out float4 oPos   : POSITION,
    out float4 oColor	: COLOR,
  
    uniform float4x4 worldViewProj,
    uniform float4 ambient,
    uniform float4 fogColor,
    uniform float4 fogParams)	
{
    oPos = mul(worldViewProj, position);

    oColor.rgb = ambient.rgb;
    oColor.a = 1.0;

    float4 f = fog(fogColor, oPos.z, fogParams);

    oColor = blend_fog(f, oColor);
}

// -------------------------------------------
void marker_ghost_vp(
    float4 position     : POSITION,
    float4 color        : COLOR,   
    float2 uv		: TEXCOORD0,   
 
    out float4 oPos     : POSITION,
    out float4 oColor   : COLOR,
    out float2 oUV      : TEXCOORD0,
 
    uniform float4x4 worldViewProj,
    uniform float4 ambient)
{
	oPos = mul(worldViewProj, position);

	// blend base light 
	float weight = 0.5f;
	oColor.rgb = weight * ambient.rgb + (1.0 - weight) * color.rgb;

	// desaturate by blending with grey
	weight = 0.7f;
	oColor.rgb = weight * oColor.rgb + (1.0 - weight) * float4(0.3f, 0.3f, 0.3f, 1.0f).rgb;

	oColor.a = 1.0;

        oUV = uv;
}


void marker_ghost_fp(
	float4 color 	      : COLOR,
	float2 uv	      : TEXCOORD0,

	out float4 oColour    : COLOR,

	uniform sampler2D decalMap : register(s0)) 
{
	float4 decalColor = tex2D(decalMap, uv);
	
	oColour = color * decalColor;
	oColour.a = decalColor.a;
}
